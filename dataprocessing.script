REFERENCE @"C:\Users\lijuli\Documents\Visual Studio 2015\Projects\ScopeApplication1\ScopeApplication1\bin\Debug\Newtonsoft.Json.dll";
//Script GUID:0dd347d9-9a2a-4b34-b9de-bd3323c29df2
//Used for tracking history
//

T1 = EXTRACT query, url, clicks FROM @@inputStream@@ USING DefaultTextExtractor;
T2 =
    PROCESS T1
    PRODUCE query, 
            url,
            clicks
    USING myProcessor();

T3 =
    SELECT query,
           url,
           SUM(clicks) AS clicks
    FROM T2
    GROUP BY query, url;

T4 =
    REDUCE T3
    ON url
    PRODUCE query, score USING myReducer;
    

OUTPUT T4 TO @@outputStream@@;
#CS
using Microsoft.SCOPE.Types;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ScopeRuntime;
using Newtonsoft.Json;

public class myReducer : Reducer
{
    public override IEnumerable<Row> Reduce(RowSet input, Row outputRow, string[] args)
    {
        string queryStr = string.Empty;
        string scoreStr = string.Empty;
        int count = 0;
        foreach (Row row in input.Rows)
        {
            var q = row[0].ToString();
            var s = row[2].ToString();
            queryStr += q + "^^^";
            scoreStr += s + "^^^";
            count++;
        }

        if (count >= 2)
        {
            outputRow[0].Set(queryStr);
            outputRow[1].Set(scoreStr);
        }

        yield return outputRow;
    }

    public override Schema Produces(string[] requestedColumns, string[] args, Schema inputSchema)
    {
        var output_schema = new Schema();
        var col0 = new ColumnInfo("query", typeof(string));
        var col1 = new ColumnInfo("score", typeof(double));

        output_schema.Add(col0);
        output_schema.Add(col1);

        return output_schema;
    }
}

public class myProcessor : Processor
{
    Dictionary<string, int> queryDict;
    Dictionary<string, int> urlDict;
    int startQueryId = 0;
    int startUrlId = 20000000;
    public override Schema Produces(string[] requestedColumns, string[] args, Schema inputSchema)
    {
        var output_schema = new Schema();
        var col0 = new ColumnInfo("query", typeof(string));
        var col1 = new ColumnInfo("url", typeof(string));
        var col2 = new ColumnInfo("clicks", typeof(double));

        output_schema.Add(col0);
        output_schema.Add(col1);
        output_schema.Add(col2);

        return output_schema;
    }

    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {
        queryDict = new Dictionary<string, int>();
        urlDict = new Dictionary<string, int>();
        foreach (Row row in input.Rows)
        {
            string query = row[0].String;
            string url = row[1].String;
            double clicks = Convert.ToDouble(row[2].String) / 100.0;

            query = query.Trim();
            query = query.Trim('\t');
            url = url.Trim();
            url = url.Trim('\t');
            if (string.IsNullOrEmpty(query) || string.IsNullOrEmpty(url))
            {
                continue;
            }

            var queryTerms = query.Split(' ');
            if (query.Length >= 4 && query.Length <= 80 && queryTerms.Length >= 2 && queryTerms.Length <= 10 && url.Length >=8 && url.Length <= 800 && (url.StartsWith("http://")|| url.StartsWith("https://")))
            {
                //if (queryDict.ContainsKey(query)==false)
                //{
                //    queryDict[query] = startQueryId++;
                //}
                //if(urlDict.ContainsKey(url)==false)
                //{
                //    urlDict[url] = startUrlId++;
                //}

                //output[0].Set(queryDict[query].ToString());
                //output[1].Set(urlDict[url].ToString());
                //output[2].Set(clicks);

                output[0].Set(query);
                output[1].Set(url);
                output[2].Set(clicks);

                yield return output;
            }

        }
    }
}
#ENDCS

// Generated by ScopeStudio, version 2.0.9550.0
